###############
####WINDOWS####
###############
#Wireshark Filter 'tcp.port' + operator 'eq or ==' + tcp port number '8080'

    tcp.port == 8080

#Wireshark filter IP packets by IP protocol number. 
    #Sheet with IP Protocol Numbers: https://docs.google.com/spreadsheets/d/1Fmfp1m3ji9fUPdNEfT75FvOXl4OnAUJ25wqMPoAOX9I/edit?usp=sharing
    
    ip.proto == ()

#Displays all connections and listening ports '-a' + Displays addresses and port numbers in numerical form '-n'
# + Displays TCP connection template for all connections '-y' (table style - Proto - Local Address - Foreign Address - State - Template)
    
    netstat –yan | find “8080” 
    netstat –yan | findstr “22” 
    netstat –yanp tcp # filter and show only TCP protocol
    netstat –yanp udp -a # filter and show only UDP protocol
    netstat -s -p icmp #PING ICMP Statistics

##Powershell###Test Connection with Powershell:
    
    Test-NetConnection -ComputerName www.google.com -InformationLevel Detailed

##Powershell###Ping multiple IP using PowerShell

    1..99 | % { Test-NetConnection -ComputerName x.x.x.$_ } | FT -AutoSize

i.e '1..99 | % { Test-NetConnection -ComputerName 167.3.139.$_ } | FT -AutoSize'

##Powershell###Tracert with PowerShell

    Test-NetConnection www.domain.com –TraceRoute

##Powershell###Use PowerShell to check for open port

Test-NetConnection -ComputerName www.domain.com -Port 80

Test-NetConnection -ComputerName www.domain.com -CommonTCPPort HTTP

##Powershell###NSlookup using PowerShell:

Resolve-DnsName www.domain.com
Resolve-DnsName www.domain.com -Type MX -Server 8.8.8.8 

#Route Add/Remove <"route" + "add"/"DELETE" + network ID + "mask" + subnet mask, dotted decimal + gateway ipv4>
    
    (Permanent) route add -p 10.0.0.0/8 192.168.1.254
or
    (Permanent) route add –p 10.X.X.X mask 255.X.X.X 192.168.X.X 
or  
    (Permanent) route DELETE  –p 10.X.X.X mask 255.X.X.X 192.168.X.X 

#Show Routing table
    
    route print

#Print Routing Table, ADD Persistent Route to 'X.X.X.X' network with mask 'y.y.y.y' through Z.Z.Z.254 (e.g)
# (line cont) and Print Routing Table after
    
route print
route DELETE -p 10.0.0.0 mask 255.255.255.0 192.168.1.254
route DELETE -p 192.0.0.0 mask 255.255.255.0 192.168.1.254
route ADD -p 10.0.0.0 mask 255.0.0.0 192.168.1.254
route ADD -p 192.0.0.0 mask 255.0.0.0 192.168.1.254
route print
PING 192.168.201.25
PING 10.1.0.20


#Cloud Network Troubleshooting:
#    1.0  Determine "Customer related issue - VPN/MPLS/SSL or Public Access" or "Cloud Internal Issue - Within DC/Between DC"
#    2.1 Customer related issue - VPN/MPLS/SSL
#        A: Customer ping/traceroute to Cloud Server
#        B: Cloud server ping/traceroute to source
#        C: Check VPN tunnel status
#        D: Check routing table/iptables on the server
#    2.2 Customer related issue Public Access
#        A:Check if DNS is correct
#        B: Check Firewall to see if the traffic is allowed
#    3.1 Cloud Internal Issue - Within DC
#        A: Ping/tracert btw problem servers
#        B: Ping/tracert btw similar servers (same VLAN)
#        C: Check iptables on the servers
#        D: Check policies on the firewall
#    3.2 Cloud Internal Issue - Between DC
#        A: Ping/tracert btw problem servers
#        B: Ping/tracert btw similar servers (diff VLAN)
#        C: Check routing tables
#        D: Check policies on the firewall

###############
#####LINUX#####
###############

#Check which applications listen on which ports and filter with grep
    netstat -tulpn | grep <tcp port number>

#Check if port 8080 is open
    netstat   -tap | grep  8080 

#Traceroute to specific TCP port - <"traceroute" + -p (port) + "TCP port number" + target host, dotted decimal>

    sudo traceroute -p 9100 192.168.18.250

#Allow blocked traffic on Firewall
    Sudo vi /etc/sysconfig/iptables.cust
    Add the allowed subnet 
    Sudo /usr/remote/odutils/stop-maintenance.sh

#Check Printer
    
    ping XX.XX.XX.XX
    telnet XX.XX.XX.XX 9100/515
    lpstat –s | grep XX.XX.XX.XX

##############################          ##############################
############################## TCP DUMP ##############################
##############################          ##############################

# UAP RSF - [ Hint: An anagram for the TCP flags: Unskilled Attackers Pester Real Security Folk ]

#Show me all URGENT (URG) packets...

    tcpdump 'tcp[13] & 32 != 0'

#Show me all ACKNOWLEDGE (ACK) packets...

    tcpdump 'tcp[13] & 16 != 0'

#Show me all PUSH (PSH) packets...
 
   tcpdump 'tcp[13] & 8 != 0'

#Show me all RESET (RST) packets...

    tcpdump 'tcp[13] & 4 != 0'

#Show me all SYNCHRONIZE (SYN) packets...

    tcpdump 'tcp[13] & 2 != 0'

#Show me all FINISH (FIN) packets...

    tcpdump 'tcp[13] & 1 != 0'

#Show me all SYNCHRONIZE/ACKNOWLEDGE (SYNACK) packets...

    tcpdump 'tcp[13] = 18'


##### [Note: Only the PSH, RST, SYN, and FIN flags are displayed in tcpdump's flag field output. URGs and ACKs are displayed, but they are shown elsewhere in the output rather than in the flags field ]



#Temporary routes Add
    
    sudo ip route add 192.0.0.0/8 via 192.168.1.254
    sudo /sbin/route add –net X.X.X.X netmask 255.X.X.X gw Y.Y.Y.Y

sudo /sbin/route add -net 192.168.100.0 netmask 255.255.255.0 gw 10.0.156.129 && sudo /sbin/route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.1.254
#Temporary routes Delete 
    
    sudo /sbin/route del  –net X.X.X.X netmask 255.X.X.X gw Y.Y.Y.Y

#Permanent Route editing with VI
    
    sudo vi /etc/sysconfig/network-scripts/route-eth0

#Press (i)nsert 
#Example route below <network id + '/' + cidr + 'via' + gateway ipv4 address>
    
10.0.0.0/8 via 192.168.1.254
192.0.0.0/8 via 192.168.1.254


#Press (esc)ape
#Save (wq!)

#restart network process (do not do - let the temporary route be used until automatic backups at server time midnight)
    sudo /sbin/service network restart

#Show routing table & open interface Route-Eth0 routes file
netstat -rn && sudo vi /etc/sysconfig/network-scripts/route-eth1


#RHEL7
#Restart network service using SYSTEMCTL; PING to host on defined subnet using range {1...(1+n)}
    
    sudo systemctl restart network && netstat -rn && sudo tcpdump host 100.65.150.111 && for i in {1..254}; do ping -c 5 192.168.1.$i | grep '1'; done 


#RHEL6
#Restart network service using /sbin/service network + show routing table + PING host(s) within subnet - TESTING
    
    sudo /sbin/service network restart &&  netstat -rn && for i in {1..254}; do ping -c 1 192.168.1.$i | grep '1'; done && sudo tcpdump host 192.168.1 -nvv

#Testing - PING host(s) within subnet 
    
    for i in {1..254}; do ping -c 1 172.17.254.$i | grep '1'; done

###Ping sweep and output only live hosts

#For loop - don't forget to add "; done" at the end so we don't run into '>' prompt issue
#below for loop: pings 1-255 hosts in 192.168.1.0/24; grep prints the matching lines "64 bytes from"; cut - remove sections from each #line of files usign "-d". --delimiter=DELIM - use delimiter instead of TAB for field delimiter. (in this case a space " ")
#finally sed - stream editor for filtering and transforming text helps us (more research needed on 's/.$//')

    for i in {1..255}; do ping -c 1 192.168.1.$i | grep "64 bytes from" | cut -d " " -f 4 | sed 's/.$//'; done


##My Traceroute: -r for outputing the results on the terminal; 

    sudo mtr -r -c 5 100.65.150.160 --no-dns | grep "." | cut -d " " -f 4

#My traceroute and PING test

    sudo mtr -r -c 5 192.168.1.1 && sudo mtr -r -c 5 192.168.1.18 && for i in {1..254}; do ping -c 5 192.168.1.$i | grep '1'; done

#For loop with mtr - For i in range 160-190 runs a mytraceroute to specified #X.X.X.$i IP address (no DNS resolution flag); greps prints the lines that #contain a "." (such as #ones with dotted decimal IP addresses); cut -d uses #space as delimiter ; done completes the loop. Useful for checking routing path in a whole subnet

      for i in {160..190}; do sudo mtr -r -c 5 100.65.150.$i --no-dns | grep "." | cut -d " " -f 4; done

#Check logs - Reference: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/ch-logfiles

    cat /etc/syslog.conf
#Contents of syslog.conf

"    # Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                /var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              /var/log/secure

# Log all the mail messages in one place.
mail.*                                                  -/var/log/maillog


# Log cron stuff
cron.*                                                  /var/log/cron

# Everybody gets emergency messages
*.emerg                                                 *

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          /var/log/spooler

# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log

# Log all messages to a remote logging server:
*.*     @server.domain.com"

